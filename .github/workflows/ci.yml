name: Run Selenium Tests with Selenoid

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  selenide-tests:
    runs-on: ubuntu-latest

    services:
      selenoid:
        image: aerokube/selenoid:latest
        ports:
          - 4444:4444
        options: >-
          --mount type=bind,source=${{ github.workspace }}/src/browsers.json,target=/etc/selenoid/browsers.json
          --health-cmd "curl -f http://localhost:4444/wd/hub/status || exit 1"
          --health-interval 5s
          --health-timeout 3s
          --health-retries 10
        environment:
          - GITHUB_ACTIONS=true
          - CI=true

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Java 21
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '21'

      # Шаг для кэширования Maven зависимостей
      - name: Cache Maven dependencies
        uses: actions/cache@v3
        with:
          path: ~/.m2/repository  # Путь к локальному Maven репозиторию
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}  # Уникальный ключ для кэширования
          restore-keys: |
            ${{ runner.os }}-maven-

      # Шаг для кэширования Docker образов
      - name: Cache Docker images
        id: cache-docker
        uses: actions/cache@v3
        with:
          path: /tmp/.docker-image-cache
          key: ${{ runner.os }}-docker-cache-${{ hashFiles('**/Dockerfile') }}
          restore-keys: |
            ${{ runner.os }}-docker-cache-

      # Если кэшированного образа нет, то загружаем заново
      - name: Pull Selenoid Docker image
        run: |
          if [ ! -f /tmp/.docker-image-cache/selenoid/standalone-chrome ]; then
            docker pull aerokube/selenoid:latest  # Загружаем правильный образ для Selenoid
            mkdir -p /tmp/.docker-image-cache/selenoid
            touch /tmp/.docker-image-cache/selenoid/standalone-chrome
          fi

      - name: Wait for Selenoid to be ready
        run: |
          echo
